"use strict";(self.webpackChunkpersonal_site=self.webpackChunkpersonal_site||[]).push([[108],{8108:function(n,e,i){i.r(e);var t=i(8683),a=(i(2791),i(1523)),r=i(2068),l=i.n(r),s=i(6842),o=i(184),d='# Datalogger circuit using ESP8266 NodeMCU and Neo6m Gps Module\n\n\n## Circuit Diagram\n\n![Schematic Diagram for circuit](/personal-site/images/projects/circuit.jpeg)\n\n\n## Code\n\n    #include <Arduino.h>\n    #if defined(ESP32)\n      #include <WiFi.h>\n    #elif defined(ESP8266)\n      #include <ESP8266WiFi.h>\n    #endif\n    #include <Firebase_ESP_Client.h>\n    \n    #include <TinyGPS++.h>\n    #include <SoftwareSerial.h>\n    \n    TinyGPSPlus gps;\n    SoftwareSerial SerialGPS(4, 5); \n    \n    \n    //Provide the token generation process info.\n    #include "addons/TokenHelper.h"\n    //Provide the RTDB payload printing info and other helper functions.\n    #include "addons/RTDBHelper.h"\n    \n    // Insert your network credentials\n    #define WIFI_SSID "Wifi_SSID"\n    #define WIFI_PASSWORD "Wifi_PASSWORDy2dkmeq7"\n    \n    \n    #define USER_EMAIL "auth_email"\n    #define USER_PASSWORD "auth_pass"\n    // Insert Firebase project API Key\n    #define API_KEY "API KEY"\n    \n    // Insert RTDB URLefine the RTDB URL */\n    #define DATABASE_URL "Database_link" \n    \n    //Define Firebase Data object\n    FirebaseData fbdo;\n    \n    FirebaseAuth auth;\n    FirebaseConfig config;\n    \n    unsigned long sendDataPrevMillis = 0;\n    int count = 0;\n    bool signupOK = false;\n    \n    //SoftwareSerial SerialGPS(4, 5); \n    float Latitude , Longitude;\n    //int year , month , date, hour , minute , second;\n    //String DateString , TimeString , LatitudeString , LongitudeString;\n    \n    void setup(){\n      Serial.begin(115200);\n      SerialGPS.begin(9600);\n      WiFi.begin(WIFI_SSID, WIFI_PASSWORD);\n      Serial.print("Connecting to Wi-Fi");\n      while (WiFi.status() != WL_CONNECTED){\n        Serial.print(".");\n        delay(300);\n      }\n      Serial.println();\n      Serial.print("Connected with IP: ");\n      Serial.println(WiFi.localIP());\n      Serial.println();\n    \n      /* Assign the api key (required) */\n      config.api_key = API_KEY;\n    \n    \n      auth.user.email = USER_EMAIL;\n      auth.user.password = USER_PASSWORD;\n      /* Assign the RTDB URL (required) */\n      config.database_url = DATABASE_URL;\n    \n      /* Sign up */\n    //  if (Firebase.signUp(&config, &auth, "", "")){\n    //    Serial.println("ok");\n    //    signupOK = true;\n    //  }\n    //  else{\n    //    Serial.printf("%s\\n", config.signer.signupError.message.c_str());\n    //  }\n    \n      /* Assign the callback function for the long running token generation task */\n      config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h\n      \n      Firebase.begin(&config, &auth);\n      Firebase.reconnectWiFi(true);\n    }\n    \n    void loop(){\n      if(SerialGPS.available() > 0){\n        if (gps.encode(SerialGPS.read()))\n        {\n          if (gps.location.isValid())\n          {\n            Latitude = gps.location.lat();\n    //        LatitudeString = String(Latitude , 6);\n            Longitude = gps.location.lng();\n    //        LongitudeString = String(Longitude , 6);\n          \n        \n         if (Firebase.ready()  && (millis() - sendDataPrevMillis > 15000 || sendDataPrevMillis == 0)){\n        sendDataPrevMillis = millis();\n        // Write an Int number on the database path test/int\n        if (Firebase.RTDB.setFloat(&fbdo, "test/gauransh/Latitude", Latitude)){\n          Serial.println("PASSED");\n          Serial.println("PATH: " + fbdo.dataPath());\n          Serial.println("TYPE: " + fbdo.dataType());\n        }\n        else {\n          Serial.println("FAILED");\n          Serial.println("REASON: " + fbdo.errorReason());\n        }\n        count++;\n        \n        // Write an Float number on the database path test/float\n        if (Firebase.RTDB.setFloat(&fbdo, "test/gauransh/Longitude", Longitude)){\n          Serial.println("PASSED");\n          Serial.println("PATH: " + fbdo.dataPath());\n          Serial.println("TYPE: " + fbdo.dataType());\n        }\n        else {\n          Serial.println("FAILED");\n          Serial.println("REASON: " + fbdo.errorReason());\n        }   }   }   } } }\n\n\n## Actual Figure\n![Actual Circuit made](/personal-site/images/projects/DataLoggerCircuit.jpg)\n## Video\n',u=d.split(/\s+/).map((function(n){return n.replace(/\W/g,"")})).filter((function(n){return n.length})).length,S=function(n){var e=Object.assign({},n);return(0,o.jsx)(a.rU,(0,t.Z)({},e))};e.default=function(){return(0,o.jsx)(s.Z,{title:"datalogger-project",description:"Learn about datalogger project",children:(0,o.jsxs)("article",{className:"post markdown",id:"about",children:[(0,o.jsx)("header",{children:(0,o.jsxs)("div",{className:"title",children:[(0,o.jsx)("h2",{"data-testid":"heading",children:(0,o.jsx)(a.rU,{to:"/project-datalogger",children:"Datalogger assignment"})}),(0,o.jsxs)("p",{children:["(in about ",u," words)"]})]})}),(0,o.jsx)(l(),{source:d,renderers:{Link:S},escapeHtml:!1})]})})}}}]);
//# sourceMappingURL=108.11e771f5.chunk.js.map